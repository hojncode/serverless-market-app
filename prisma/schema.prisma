// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // prisma 가 foreign key constraint 참조 무결성 원칙을 수행 해줌. 이전 prisam 버젼은 referentialIntegrity 구문이었지만 현재 버젼에서 이 코드로 변경됨. 
}

model User {
  id               Int          @id @default(autoincrement())
  phone            String?      @unique
  email            String?      @unique
  name             String   
  avatar           String?    
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  tokens           Token[]
  products         Product[]
  fav              Fav[]
  posts            Post[]
  answers          Answer[]
  wonderings       wondering[]
  writtenReviews   Review[]     @relation(name:"writtenReviews")
  receivedReviews  Review[]     @relation(name:"receivedReviews")
  sales            Sale[]
  purchases        Purchase[]
  records           Record[]
} 

model Token {
  id               Int          @id @default(autoincrement())
  payload          String       @unique
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int    
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([userId]) // *Relation mode* https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#indexes
}

model Product {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int    
  image            String   
  name             String   
  price            Int    
  description      String       @db.MediumText
  favs             Fav[]
  sales            Sale[]
  purchases        Purchase[]
  records          Record[]

  @@index([userId]) // *Relation mode* https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#indexes
}



model Post {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int   
  question          String      @db.MediumText // db에서 String의 길이 제한 MediumText 으로 설정.
  latitude          Float?
  longitude         Float?
  answers           Answer[]
  wondering         wondering[]

  @@index([userId]) 
}

model Answer {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int   
  post              Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            Int   
  answer            String      @db.MediumText

  @@index([userId]) 
  @@index([postId]) 
}

model wondering {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int   
  post              Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            Int

  @@index([userId]) 
  @@index([postId]) 

}

model Review {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  review            String      @db.MediumText
  createdBy         User        @relation(name:"writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById       Int
  createdFor        User        @relation(name:"receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId      Int

  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id                Int         @id @default(autoincrement())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int   
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId]) // *Relation mode* https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#indexes
  @@index([productId])
}

model Purchase {
  id                Int         @id @default(autoincrement())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int   
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId]) // *Relation mode* https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#indexes
  @@index([productId])
}


model Record {
  id                Int          @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int    
  product           Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int    
  createdAt         DateTime     @default(now())
  kind              Kind     
  updatedAt         DateTime     @updatedAt

  @@index([userId]) // *Relation mode* https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#indexes
  @@index([productId])
}  

model Fav {
  id                Int         @id @default(autoincrement())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int   
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId]) // *Relation mode* https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#indexes
  @@index([productId])
}

// enum 사용하기 . 공통된 테이블이 있을때 중복사용을 줄일 수 있다.
//https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#enum

enum Kind {
  Purchase
  Sale
  Fav
}

